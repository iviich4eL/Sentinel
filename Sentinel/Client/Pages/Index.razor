@page "/"
@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@using Sentinel.Shared
@using Sentinel.Shared.Dto
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Subscribe:
        <input @bind="subscribeInput" />
    </label>
    <button @onclick="Subscribe" disabled="@(!IsConnected)">Subscribe</button>
</div>
<div class="form-group">
    <label>
        Unsubscribe:
        <input @bind="unsubscribeInput" />
    </label>
    <button @onclick="Unsubscribe" disabled="@(!IsConnected)">Unsubscribe</button>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    private string subscribeInput;
    private string unsubscribeInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/sentinelhub"))
            .AddNewtonsoftJsonProtocol()
            .Build();

        hubConnection.On<ResponseDto>(Constants.ReceiveMessage, (response) =>
        {
            var encodedMsg = $"At: {response.TimeStamp}, From: {response.From}, Message: {response.Message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<ErrorDto>(Constants.ReceiveError, (response) =>
        {
            var encodedMsg = $"At: {response.TimeStamp}, From: {response.From}, Error: {response.Error}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        //await hubConnection.StartAsync();
        await StartConnectionAsync();
    }

    Task Subscribe() =>
        hubConnection.SendAsync(Constants.Subscribe, subscribeInput);

    Task Unsubscribe() =>
        hubConnection.SendAsync(Constants.Unsubscribe, unsubscribeInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        hubConnection.Closed -= OnConnectionClosed;
        await hubConnection.DisposeAsync();
    }

    private async Task StartConnectionAsync()
    {
        while (!IsConnected)
        {
            try
            {
                await hubConnection.StartAsync();
            }
            catch (Exception exception)
            {
                Debug.WriteLine(exception);

                await ReconnectDelay();
            }
        }
    }

    private async Task OnConnectionClosed(Exception arg)
    {
        await ReconnectDelay();
        await StartConnectionAsync();
    }

    private async Task ReconnectDelay()
    {
        // see. https://github.com/aspnet/SignalR/issues/1611
        // random delay to avoid "Reconnect Storm"
        await Task.Delay(new Random().Next(400, 3000));
    }

}